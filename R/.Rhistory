library(clusterProfiler)
?DisGeNET
??DisGeNET
library(DOSE)
??DisGeNET
?DisGeNET
library(DisGeNET)
library(DOSE)
?DisGeNET
DisGeNET
?enrichDGN
?enrichNCG
library(DOSE)
?DisGeNET
?enrichDGN
getwd()
source('/Users/yanli/Desktop/bioinfodt/run_functional_analysis_main_headerOptions_4scRNAseq_posClusterGenes.R')
workDir
repoDownload
setwd(currentDir)
print('=========')
getwd()
library(clusterProfiler)
?dotplot
library(DOSE)
data(geneList)
de <- names(geneList)[1:100]
x <- enrichDO(de)
dotplot(x)
?enrichGO
## This script is used to define the input files to conduct gsor (gene sets over representation analysis) based on the R script located in R/gsor
## ---------
rm(list = ls())
currentDir = getwd()
runHPC                     = as.logical(F)
workDir = '/Volumes/bioinformatics/Projects/CRI-BIO-757-MED-ELengyel-yli-lszhu/scRNA-Seq_analysis_results/seurat_standardWorkflow_mt20_all_patient_fallopian_tissues_results'
repoDownload             <- sprintf('/Users/yanli/Desktop/%s', repo)
repo                       = 'bioinfodt'
runHPC                     = as.logical(F)
workDir = '/Volumes/bioinformatics/Projects/CRI-BIO-757-MED-ELengyel-yli-lszhu/scRNA-Seq_analysis_results/seurat_standardWorkflow_mt20_all_patient_fallopian_tissues_results'
repoDownload             <- sprintf('/Users/yanli/Desktop/%s', repo)
## ---
## source all related codes in downloaded repo
gsorSourceCodes            <- list.files(path = paste(repoDownload, 'R/gsor', sep = '/'), pattern = '*.R', full.names = T )
for (f in gsorSourceCodes) source(f)
cpEnrichGoInputFnames       <- paste(workDir, 'allCluster_pos_markers_top10.txt', sep = '/')
cpEnrichGoInputType         <- 'scClusterPosGenes'  # options are 'DEG_OL', 'DEG_ORG', 'CytoScapeOutputEssential', 'CytoScapeOutputModules', 'geneListsInput', 'scClusterPosGenes'
cpEnrichGoInputRename       <- as.logical('F')
cpEnrichGoDirName           <- 'allCluster_pos_markers_functional_gsor_results_TESTTEST'
refGenome4cpenrichGo        <- 'human'
geneListsType               <- 'GeneSymbol'
resFnameSuffix              <- 'res_Fname_Suffix'
runGO                       <- as.logical('T')
goPool                      <- as.logical('F')
runKegg                     <- as.logical('F')
runReactome                 <- as.logical('F')
runHumanDisease             <- as.logical('F')
runNetworkCancerGenes       <- as.logical('F')
## Main Programs to run functional enrichment analysis with below options specified in running program.
## based on option input defined in 'run_functional_analysis_main_headerOptions_*.R'
# -
# 0.1. setup enrichGoResSaveDir for results to be save
enrichGoResSaveDir  <- paste(workDir, cpEnrichGoDirName, sep = '/')
## Main Programs to run functional enrichment analysis with below options specified in running program.
## based on option input defined in 'run_functional_analysis_main_headerOptions_*.R'
# -
# 0.1. setup enrichGoResSaveDir for results to be save
enrichGoResSaveDir  <- paste(workDir, cpEnrichGoDirName, sep = '/')
## -------
print('=========')
print(sprintf('functional enrichment (GSOR) analysis results will be saved at %s', enrichGoResSaveDir))
print('------')
print('Start step 1: input gene lists processing')
# 1.1 get input gene lists for cp.enrich.go() function
if (cpEnrichGoInputType == 'DEG_OL') {
library(openxlsx)
sheetNames <- getSheetNames(cpEnrichGoInputFnames)
# sheetNames <- sheetNames(degFullResFname[[l]]) #gdata()
detach("package:openxlsx", unload=TRUE)
# -
cpEnrInputGeneLists <- lapply(sheetNames, function(x) {
resFull  <- read.xlsx(file = cpEnrichGoInputFnames, header = T, sheetName = x, stringsAsFactors = 'F')
resGenes <- resFull[,1]
})
if (cpEnrichGoInputRename) {
names(cpEnrInputGeneLists) <- cpEnrichGoInputNames
} else {
names(cpEnrInputGeneLists) <- sheetNames
}
# -
} else if ( cpEnrichGoInputType == 'DEG_ORG' ) {
# -
if (cpEnrichGoInputGlmRes) {
deMethod = as.character(cpEnrichGoInputGlmDEmethods)
pval     = as.numeric(cpEnrichGoInputGlmDEGspval)
fc       = as.numeric(cpEnrichGoInputGlmDEGsFC)
# -
DegResNamePrefixEdit        <- paste(enrichGoResSaveDir, paste(names(cpEnrichGoInputFnames), 'fdr', pval, 'FC', fc, sep = '_'), sep = '/')
# -
resFull <- lapply(1:length(cpEnrichGoInputFnames), function(x) {
resDEGs  <- getDeg(deGlmRes = cpEnrichGoInputFnames[[x]], PVAL = pval, FC = fc, method = deMethod, adjPon = 'T', saveRes = 'T', resNamePrefix = DegResNamePrefixEdit[x])
} )
# -
cpEnrInputGeneLists <- lapply(resFull, '[[', 2)
} else if (cpEnrichGoInputGlmFname) {
deMethod = as.character(cpEnrichGoInputGlmDEmethods)
pval     = as.numeric(cpEnrichGoInputGlmDEGspval)
fc       = as.numeric(cpEnrichGoInputGlmDEGsFC)
DegResNamePrefixEdit        <- paste(enrichGoResSaveDir, paste(names(cpEnrichGoInputFnames), 'fdr', pval, 'FC', fc, sep = '_'), sep = '/')
cpEnrInputGeneLists         <- lapply(1:length(cpEnrichGoInputFnames), function(x) {
# resFull                   <- read.delim(file = cpEnrichGoInputFnames[[x]], header = T, check.names = F, sep = '\t', row.names = 1)
resFull                   <- getDeg(inputFname = cpEnrichGoInputFnames[[x]], PVAL = pval, FC = fc, method = deMethod, adjPon = 'T', saveRes = 'T', resNamePrefix = DegResNamePrefixEdit[x])
resGenes                  <- resFull$degGeneName
})
} else {
cpEnrInputGeneLists         <- lapply(cpEnrichGoInputFnames, function(x) {
resFull                   <- read.delim(file = x, header = T, check.names = F, sep = '\t', row.names = 1)
resGenes                  <- rownames(resFull)
})
}
names(cpEnrInputGeneLists) <- names(cpEnrichGoInputFnames)
# -
} else if ( cpEnrichGoInputType == 'CytoScapeOutputEssential' ) {
# -
cpEnrInputGeneLists <- list()
for (i in 1:length(cpEnrichGoInputFnames)) {
cpEnrInputGeneLists[[i]] <- getEssentialGlist(cytoResCsvFname = cpEnrichGoInputFnames[[i]], degreeCutoff = degreeCutoffVals[i], refGenome4cpenrichGo = refGenome4cpenrichGo)
}
names(cpEnrInputGeneLists) <- names(cpEnrichGoInputFnames)
# -
} else if ( cpEnrichGoInputType == 'CytoScapeOutputModules' ) {
# -
cpEnrInputGeneLists <- list()
for (i in 1:length(cpEnrichGoInputFnames)) {
moduleGlists <- getModuleGlist(cytoResCsvFname = cpEnrichGoInputFnames[[i]], moduleCutoff = moduleCutoffVals[i])
names(moduleGlists) <- paste(names(cpEnrichGoInputFnames)[i], names(moduleGlists), sep = ':')
cpEnrInputGeneLists <- append(cpEnrInputGeneLists, moduleGlists)
}
# -
} else if ( cpEnrichGoInputType == 'geneListsInput' ) {
cpEnrInputGeneLists <- cpEnrichGoInputFnames
} else if ( cpEnrichGoInputType == 'scClusterPosGenes' ) {
scRNAseqClusterPosGenes     <- read.delim(file = cpEnrichGoInputFnames, header = T, sep = '\t', check.names = F, row.names = 1)
scRNAseqClusterRes          <- scRNAseqClusterPosGenes %>% dplyr::group_by(cluster)
scRNAseqClusterGroups       <- attr(scRNAseqClusterRes, "groups")
cpEnrInputGeneLists         <- list()
for (i in 1:length(scRNAseqClusterGroups$cluster)) {
cpEnrInputGeneLists[[i]]  <- scRNAseqClusterPosGenes[scRNAseqClusterGroups$.rows[[i]],] %>% dplyr::pull(gene)
}
names(cpEnrInputGeneLists)  <- paste('cluster_', scRNAseqClusterGroups$cluster, sep = '')
}
print('END step 1: input gene lists processing')
print('Input gene list looks like as below:')
str(cpEnrInputGeneLists)
print('=========')
# ------
# 2.1. if 'runGO' on, run enrichment GO analysis with cp.enrich.go() function
print('------')
print('Start step 2: Start GSOR analysis')
if (runGO) {
print('START Step 2.1 clustered input gene lists GO over-representation enrichment analysis')
if (goPool) {
cpORgoPoolRes <- cpORTest(gsorInputGenes     = cpEnrInputGeneLists,
# gsorInputGenes     = lapply(cpEnrInputGeneLists, '[', 1:10),
gsorInputGenesType = geneListsType,
refGenome          = refGenome4cpenrichGo,
functionDB         = 'go')
resFnamePrefix = paste(enrichGoResSaveDir, '/cpEnrich_GoPool_clustered_res_', resFnameSuffix, sep = '')
outputCpORTestRes(cpORTestRes = cpORgoPoolRes, resFnamePrefix = resFnamePrefix, plotTitle = 'GO enrichment')
} else {
cpORgoSepResBP <- cpORTest(gsorInputGenes     = cpEnrInputGeneLists,
gsorInputGenesType = geneListsType,
refGenome          = refGenome4cpenrichGo,
functionDB         = 'gobp')
cpORgoSepResCC <- cpORTest(gsorInputGenes     = cpEnrInputGeneLists,
gsorInputGenesType = geneListsType,
refGenome          = refGenome4cpenrichGo,
functionDB         = 'gocc')
cpORgoSepResMF <- cpORTest(gsorInputGenes     = cpEnrInputGeneLists,
gsorInputGenesType = geneListsType,
refGenome          = refGenome4cpenrichGo,
functionDB         = 'gomf')
resFnamePrefix = paste(enrichGoResSaveDir, '/cpEnrich_GoSep_clustered_res_', resFnameSuffix, sep = '')
outputCpORTestRes(cpORTestRes = cpORgoSepResBP, resFnamePrefix = paste(resFnamePrefix, '_BP', sep = ''), plotTitle = 'GO BP enrichment')
outputCpORTestRes(cpORTestRes = cpORgoSepResCC, resFnamePrefix = paste(resFnamePrefix, '_CC', sep = ''), plotTitle = 'GO CC enrichment')
outputCpORTestRes(cpORTestRes = cpORgoSepResMF, resFnamePrefix = paste(resFnamePrefix, '_MF', sep = ''), plotTitle = 'GO MF enrichment')
}
print('COPMPLETE Step 2.1 clustered input gene lists GO enrichment analysis')
print('======')
}
goPool
cpORgoSepResBP
resFnamePrefix
resFnamePrefix = paste(enrichGoResSaveDir, '/', resFnameSuffix, '_cpEnrich_GoSep_clustered_res', sep = '')
resFnamePrefix
cpORTestRes = cpORgoSepResBP
resFnamePrefix = paste(resFnamePrefix, '_BP', sep = '')
plotTitle = 'GO BP enrichment'
head(cpORTestRes$resFull)
##make GO enrichment plot
no.showcategory <- 5
if ('Cluster' %in% colnames(cpORTestRes$resFull)) {
print(sprintf('There are a total of %s %s in below clusters', dim(cpORTestRes$res4plot)[1], plotTitle))
print('A total of enriched functions in each cluster is listed below')
print(table(as.data.frame(cpORTestRes$resFull)$Cluster))
}
dotplot(cpORTestRes$res4plot, showCategory = no.showcategory, title = plotTitle)
p1 = dotplot(cpORTestRes$res4plot, showCategory = no.showcategory, title = plotTitle)
str(p1)
cpORTestRes$res4plot %>% dplyr::filter(Cluster == 'cluster_0' | Cluster == 'cluster_1')
p1 = dotplot(cpORTestRes$res4plot %>% dplyr::filter(Cluster == 'cluster_0' | Cluster == 'cluster_1'), showCategory = no.showcategory, title = plotTitle)
p1
p1 + theme(axis.text.x = element_text(angle = 90))
dotplot(cpORTestRes$res4plot, showCategory = no.showcategory, title = plotTitle)  + theme(axis.text.x = element_text(angle = 90))
?get.t2g
# ---
library(msigdbr)
?get.t2g
library(clusterProfiler)
?get.t2g
library(msigdbr)
m_t2g       <- msigdbr(species = "Homo sapiens", category = category)
m_t2g       <- msigdbr(species = "Homo sapiens", category = "H")
